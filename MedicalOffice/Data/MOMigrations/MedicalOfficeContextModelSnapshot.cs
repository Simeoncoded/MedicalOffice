// <auto-generated />
using System;
using MedicalOffice.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedicalOffice.Data.MOMigrations
{
    [DbContext(typeof(MedicalOfficeContext))]
    partial class MedicalOfficeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("MedicalOffice.Models.Condition", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConditionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Conditions");
                });

            modelBuilder.Entity("MedicalOffice.Models.Doctor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("MedicalOffice.Models.MedicalTrial", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("TrialName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("MedicalTrials");
                });

            modelBuilder.Entity("MedicalOffice.Models.Patient", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Coverage")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("TEXT");

                    b.Property<int>("DoctorID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<byte>("ExpYrVisits")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("MedicalTrialID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("OHIP")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("DoctorID");

                    b.HasIndex("MedicalTrialID");

                    b.HasIndex("OHIP")
                        .IsUnique();

                    b.HasIndex("DOB", "LastName", "FirstName")
                        .IsUnique();

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("MedicalOffice.Models.PatientCondition", b =>
                {
                    b.Property<int>("ConditionID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PatientID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ConditionID", "PatientID");

                    b.HasIndex("PatientID");

                    b.ToTable("PatientConditions");
                });

            modelBuilder.Entity("MedicalOffice.Models.Patient", b =>
                {
                    b.HasOne("MedicalOffice.Models.Doctor", "Doctor")
                        .WithMany("Patients")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Models.MedicalTrial", "MedicalTrial")
                        .WithMany("Patients")
                        .HasForeignKey("MedicalTrialID");

                    b.Navigation("Doctor");

                    b.Navigation("MedicalTrial");
                });

            modelBuilder.Entity("MedicalOffice.Models.PatientCondition", b =>
                {
                    b.HasOne("MedicalOffice.Models.Condition", "Condition")
                        .WithMany("PatientConditions")
                        .HasForeignKey("ConditionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedicalOffice.Models.Patient", "Patient")
                        .WithMany("PatientConditions")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Condition");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalOffice.Models.Condition", b =>
                {
                    b.Navigation("PatientConditions");
                });

            modelBuilder.Entity("MedicalOffice.Models.Doctor", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("MedicalOffice.Models.MedicalTrial", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("MedicalOffice.Models.Patient", b =>
                {
                    b.Navigation("PatientConditions");
                });
#pragma warning restore 612, 618
        }
    }
}
